Python Advance Assignment-22

1. What are the advantages, if any, of the built-in array package?
Ans.
Arrays represent multiple data items of the same type using a single name.
In arrays, the elements can be accessed randomly by using the index number.
Arrays allocate memory in contiguous memory locations for all its elements. Hence there is no chance of extra memory being allocated in case of arrays. This avoids memory overflow or shortage of memory in arrays.
2. What are some limitations of the array package?
Ans
The number of elements to be stored in an array should be known in advance.
An array is a static structure (which means the array is of fixed size). Once declared the size of the array cannot be modified. The memory which is allocated to it cannot be increased or decreased.
Insertion and deletion are quite difficult in an array as the elements are stored in consecutive memory locations and the shifting operation is costly.
Allocating more memory than the requirement leads to wastage of memory space and less allocation of memory also leads to a problem.
3. State some major differences between the array package and numpy.
Ans.
The array package doesn't provide any help with numerical calculation with the items insdie it in number form while NumPy give you a wide variety of numerical operations
An array is a single dimensional entity which hold the numerical data, while numpy can have more than 1 dimension.
In case of array, item can be accessed by its index position and it is easy task while in numpy item is accessed by its column and row index, which makes it slightly time taking. Same goes with appending operation.
In case of array we do not form a tabular structure, while in numpy it forms a tabular structure
4. Describe the differences between the empty, ones, and zeros functions.
Ans.
empty function: An empty function is a function that does not contain any statement within its body. If you try to write a function definition without any statement in python ,it will return an error. To avoid this, we use pass statement. pass is a special statement in Python that does nothing. It only works as a dummy statement
ones: This function returns a new array of given shape and data type, where the element’s value is 1.
zeros: This function returns a new array of given shape and data type, where the element’s value is 0
5. What is the role of the callable argument in the fromfunction function used to create new arrays?
Ans.
Its function is to execute the function over each coordinate and the resulting array. The function is called with N parameters, where N is the rank of shape. Each parameter represents the coordinates of the array varying along a specific axis.
6. What happens when a numpy array is combined with a single-value operand (a scalar, such as an int or a floating-point value) through addition, as in the expression A + n?
Ans.
If any scaler value such as integer is added to the numpy array then all the elements inside the array will add that value in it.
Example
In [22]:
import numpy as np

a=np.arange(9).reshape(3,3)
print(a)
print()
print(a+1)
[[0 1 2]
 [3 4 5]
 [6 7 8]]

[[1 2 3]
 [4 5 6]
 [7 8 9]]
7. Can combined operation-assign operators (such as += or *=) be used in array-to-scalar operation? What is the effect?
Ans.
It will do the operation as per operators. Like if we use + operand it will update the current array by adding and when we use '*', it will update by multiplying.
Example
In [24]:
print(a)
[[0 1 2]
 [3 4 5]
 [6 7 8]]
In [26]:
a+=1
In [27]:
print(a)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
In [28]:
a*=2
In [29]:
print(a)
[[ 2  4  6]
 [ 8 10 12]
 [14 16 18]]
8. Can fixed-length strings be included in a numpy array? What happens when a string of longer length is assigned to such an array?
Ans,
Yes it is possible that we can include a string of fixed length in numpy array. The dtype of any numpy array containing string values is the maximum length of any string present in the array.
Once set, it will only be able to store new string having length not more than the maximum length at the time of the creation. If we try to reassign some another string value having length greater than the maximum length of the existing elements, it simply discards all the values beyond the maximum length accept upto those values which are under the limit
In [64]:
import numpy as np

name = np.array(['ram', 'mohan', 'shiva'])

name
Out[64]:
array(['ram', 'mohan', 'shiva'], dtype='<U5')
In [40]:
name[name=='ram']='undertaker'
In [42]:
print(name) #not gone beyond maximum length 5
['under' 'mohan' 'shiva']
9. What happens when two numpy arrays are combined through an operation such as addition (+) or multiplication (*)? What requirements must be met to combine two numpy arrays?
Ans.
It will simply add or multiply element to element at same position.
The only requirement which must be met are:
* Data type should be same
* Shape of the two matrices must be same


Example is given below
In [65]:
a1=a
a1
Out[65]:
array([[ 2,  4,  6],
       [ 8, 10, 12],
       [14, 16, 18]])
In [59]:
a2=a+2
a2
Out[59]:
array([[ 4,  6,  8],
       [10, 12, 14],
       [16, 18, 20]])
In [66]:
a1+a2
Out[66]:
array([[ 6, 10, 14],
       [18, 22, 26],
       [30, 34, 38]])
In [67]:
a1*a2
Out[67]:
array([[  8,  24,  48],
       [ 80, 120, 168],
       [224, 288, 360]])
In [68]:
a1+a2.reshape(9,1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-68-f24d236b5a9f> in <module>
----> 1 a1+a2.reshape(9,1)

ValueError: operands could not be broadcast together with shapes (3,3) (9,1) 
In [69]:
a1*a2.reshape(9,1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-69-4ba0754c30f9> in <module>
----> 1 a1*a2.reshape(9,1)

ValueError: operands could not be broadcast together with shapes (3,3) (9,1) 
10. How do you use a Boolean array as a mask for another array?
In [34]:
y = np.array([True,True,False,True])          
x = np.array([1,2,3,4])         
m = np.ma.masked_where(x>2,y)  
print(list(m))
# print(m.ndim)
[True, True, masked, masked]
11. What are three distinct ways, using both standard Python and its packages, to get the standard deviation of a large set of data? Rank the three of them according to execution speed.
Ans.
Standard deviation can be calculated in amny ways. If wee see the formula of SD, it says
std= Square Root of [ Summation of [square of (x-mean)/number of observation] ]
So this can be achive by:
In [ ]:
# 1) Using math module
import math
avg=a
total=N
x=[1,2]
SD=math.sqrt((1-a)**2+(2-a)**2/N)
In [25]:
# 2) Using Numpy Array package

import numpy as np

SD=np.std(x)
In [ ]:
# 3) General calculation without using any package

SD= (((1-avg)**2 + (2-avg)**2)/N)**1/2
12. What is the dimensionality of an array produced by a Boolean mask?
Ans. It will be same as that of the given array.
Example we have two aray of same dimensions say 1, then the array produced by given array will be of same dimension
In [37]:
y = np.array([True,True,False,True])          
x = np.array([1,2,3,4])         
m = np.ma.masked_where(x>2,y)  
print(list(m))
print()
print('Dimension is',m.ndim)
[True, True, masked, masked]

Dimension is 1
